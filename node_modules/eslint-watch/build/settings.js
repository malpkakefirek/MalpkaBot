"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _os = _interopRequireDefault(require("os"));

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _package = _interopRequireDefault(require("../package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Internal Settings */
const logger = (0, _logger.default)('internal-settings');

const platform = _os.default.platform();

const eslintPath = function loadEslintPath() {
  const cmd = platform === 'win32' ? '.cmd' : '';
  let eslintPath;

  try {
    eslintPath = _path.default.join('./', `node_modules/.bin/eslint${cmd}`);

    _fs.default.accessSync(eslintPath);

    logger.debug(`Eslint installed locally ${eslintPath}`);
  } catch (e) {
    logger.debug(e);

    try {
      eslintPath = _path.default.join(process.env._, `../eslint${cmd}`);

      _fs.default.accessSync(eslintPath);

      logger.debug(`Eslint installed globally ${eslintPath}`);
    } catch (e) {
      throw new Error('Eslint needs to be installed globally or locally in node_modules.');
    }
  }

  return eslintPath;
}();

const settings = {
  eswVersion: _package.default.version,
  eslintPath,
  platform,
  isWindows: platform === 'win32'
};
logger.debug(settings);
var _default = settings;
exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJwbGF0Zm9ybSIsIm9zIiwiZXNsaW50UGF0aCIsImxvYWRFc2xpbnRQYXRoIiwiY21kIiwicGF0aCIsImpvaW4iLCJmcyIsImFjY2Vzc1N5bmMiLCJkZWJ1ZyIsImUiLCJwcm9jZXNzIiwiZW52IiwiXyIsIkVycm9yIiwic2V0dGluZ3MiLCJlc3dWZXJzaW9uIiwicGtnIiwidmVyc2lvbiIsImlzV2luZG93cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBTEE7QUFPQSxNQUFNQSxTQUFTLHFCQUFPLG1CQUFQLENBQWY7O0FBQ0EsTUFBTUMsV0FBV0MsWUFBR0QsUUFBSCxFQUFqQjs7QUFFQSxNQUFNRSxhQUFjLFNBQVNDLGNBQVQsR0FBMEI7QUFDNUMsUUFBTUMsTUFBTUosYUFBYSxPQUFiLEdBQXVCLE1BQXZCLEdBQWdDLEVBQTVDO0FBQ0EsTUFBSUUsVUFBSjs7QUFDQSxNQUFJO0FBQ0ZBLGlCQUFhRyxjQUFLQyxJQUFMLENBQVUsSUFBVixFQUFpQiwyQkFBMEJGLEdBQUksRUFBL0MsQ0FBYjs7QUFDQUcsZ0JBQUdDLFVBQUgsQ0FBY04sVUFBZDs7QUFDQUgsV0FBT1UsS0FBUCxDQUFjLDRCQUEyQlAsVUFBVyxFQUFwRDtBQUNELEdBSkQsQ0FJRSxPQUFPUSxDQUFQLEVBQVU7QUFDVlgsV0FBT1UsS0FBUCxDQUFhQyxDQUFiOztBQUNBLFFBQUk7QUFDRlIsbUJBQWFHLGNBQUtDLElBQUwsQ0FBVUssUUFBUUMsR0FBUixDQUFZQyxDQUF0QixFQUEwQixZQUFXVCxHQUFJLEVBQXpDLENBQWI7O0FBQ0FHLGtCQUFHQyxVQUFILENBQWNOLFVBQWQ7O0FBQ0FILGFBQU9VLEtBQVAsQ0FBYyw2QkFBNEJQLFVBQVcsRUFBckQ7QUFDRCxLQUpELENBSUUsT0FBT1EsQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJSSxLQUFKLENBQVUsbUVBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT1osVUFBUDtBQUNELENBbEJrQixFQUFuQjs7QUFvQkEsTUFBTWEsV0FBVztBQUNmQyxjQUFZQyxpQkFBSUMsT0FERDtBQUVmaEIsWUFGZTtBQUdmRixVQUhlO0FBSWZtQixhQUFXbkIsYUFBYTtBQUpULENBQWpCO0FBT0FELE9BQU9VLEtBQVAsQ0FBYU0sUUFBYjtlQUVlQSxRIiwic291cmNlc0NvbnRlbnQiOlsiLyogSW50ZXJuYWwgU2V0dGluZ3MgKi9cbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwa2cgZnJvbSAnLi4vcGFja2FnZSc7XG5cbmNvbnN0IGxvZ2dlciA9IExvZ2dlcignaW50ZXJuYWwtc2V0dGluZ3MnKTtcbmNvbnN0IHBsYXRmb3JtID0gb3MucGxhdGZvcm0oKTtcblxuY29uc3QgZXNsaW50UGF0aCA9IChmdW5jdGlvbiBsb2FkRXNsaW50UGF0aCgpIHtcbiAgY29uc3QgY21kID0gcGxhdGZvcm0gPT09ICd3aW4zMicgPyAnLmNtZCcgOiAnJztcbiAgbGV0IGVzbGludFBhdGg7XG4gIHRyeSB7XG4gICAgZXNsaW50UGF0aCA9IHBhdGguam9pbignLi8nLCBgbm9kZV9tb2R1bGVzLy5iaW4vZXNsaW50JHtjbWR9YCk7XG4gICAgZnMuYWNjZXNzU3luYyhlc2xpbnRQYXRoKTtcbiAgICBsb2dnZXIuZGVidWcoYEVzbGludCBpbnN0YWxsZWQgbG9jYWxseSAke2VzbGludFBhdGh9YCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIuZGVidWcoZSk7XG4gICAgdHJ5IHtcbiAgICAgIGVzbGludFBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuXywgYC4uL2VzbGludCR7Y21kfWApO1xuICAgICAgZnMuYWNjZXNzU3luYyhlc2xpbnRQYXRoKTtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgRXNsaW50IGluc3RhbGxlZCBnbG9iYWxseSAke2VzbGludFBhdGh9YCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFc2xpbnQgbmVlZHMgdG8gYmUgaW5zdGFsbGVkIGdsb2JhbGx5IG9yIGxvY2FsbHkgaW4gbm9kZV9tb2R1bGVzLicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXNsaW50UGF0aDtcbn0pKCk7XG5cbmNvbnN0IHNldHRpbmdzID0ge1xuICBlc3dWZXJzaW9uOiBwa2cudmVyc2lvbixcbiAgZXNsaW50UGF0aCxcbiAgcGxhdGZvcm0sXG4gIGlzV2luZG93czogcGxhdGZvcm0gPT09ICd3aW4zMicsXG59O1xuXG5sb2dnZXIuZGVidWcoc2V0dGluZ3MpO1xuXG5leHBvcnQgZGVmYXVsdCBzZXR0aW5ncztcbiJdfQ==