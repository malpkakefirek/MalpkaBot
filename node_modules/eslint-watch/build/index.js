"use strict";

var _keypress = _interopRequireDefault(require("keypress"));

var _settings = _interopRequireDefault(require("./settings"));

var _cli = _interopRequireDefault(require("./eslint/cli"));

var _options = _interopRequireDefault(require("./options"));

var _watcher = _interopRequireDefault(require("./watcher"));

var _argParser = _interopRequireDefault(require("./arg-parser"));

var _logger = _interopRequireDefault(require("./logger"));

var _package = _interopRequireDefault(require("../package"));

var _clearTerminal = _interopRequireDefault(require("./formatters/helpers/clear-terminal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-process-exit: 0*/
const logger = (0, _logger.default)('esw-cli');
logger.debug('Loaded');
logger.debug(`Eslint-Watch: ${_package.default.version}`);
let exitCode;
const args = process.argv;

function runLint(args, options) {
  logger.debug(args);
  const result = (0, _cli.default)(args, options);
  logger.debug('lint completed. Exit Code: %o', result.exitCode);
  exitCode = result.exitCode;
  logger.log(result.message);
}

function keyListener(args, options) {
  let stdin = process.stdin;

  if (!stdin.setRawMode) {
    logger.debug('Process might be wrapped exiting keybinding');
    return;
  }

  (0, _keypress.default)(stdin);
  stdin.on('keypress', function keyPressListener(ch, key) {
    logger.debug('%s was pressed', key ? key.name : ch);

    if (key && key.name === 'return') {
      logger.debug('relinting...');
      logger.debug(options);
      runLint(args, options);
    }

    if (key && key.ctrl && key.name === 'c') {
      process.exit();
    }
  });
  stdin.setRawMode(true);
  stdin.resume();
}

logger.debug('Arguments passed: %o', args);

const parsedOptions = _options.default.parse(args);

_settings.default.cliOptions = parsedOptions;

if (parsedOptions.eswVersion) {
  logger.log(_package.default.version);
} else {
  logger.debug('Parsing args');

  const eslArgs = _argParser.default.parse(args, parsedOptions);

  if (!parsedOptions.help) {
    logger.debug('Running initial lint');

    if (parsedOptions.clear) {
      (0, _clearTerminal.default)();
    }

    runLint(eslArgs, parsedOptions);

    if (parsedOptions.watch) {
      logger.debug('-w seen');
      keyListener(eslArgs, parsedOptions);
      (0, _watcher.default)(parsedOptions);
    }
  } else {
    logger.log(_options.default.generateHelp());
  }
}

process.on('exit', () => {
  logger.debug(`Exiting: ${exitCode}`);
  process.exit(exitCode);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJkZWJ1ZyIsInBrZyIsInZlcnNpb24iLCJleGl0Q29kZSIsImFyZ3MiLCJwcm9jZXNzIiwiYXJndiIsInJ1bkxpbnQiLCJvcHRpb25zIiwicmVzdWx0IiwibG9nIiwibWVzc2FnZSIsImtleUxpc3RlbmVyIiwic3RkaW4iLCJzZXRSYXdNb2RlIiwib24iLCJrZXlQcmVzc0xpc3RlbmVyIiwiY2giLCJrZXkiLCJuYW1lIiwiY3RybCIsImV4aXQiLCJyZXN1bWUiLCJwYXJzZWRPcHRpb25zIiwiaGVscE9wdGlvbnMiLCJwYXJzZSIsInNldHRpbmdzIiwiY2xpT3B0aW9ucyIsImVzd1ZlcnNpb24iLCJlc2xBcmdzIiwiYXJnUGFyc2VyIiwiaGVscCIsImNsZWFyIiwid2F0Y2giLCJnZW5lcmF0ZUhlbHAiXSwibWFwcGluZ3MiOiI7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFWQTtBQVlBLE1BQU1BLFNBQVMscUJBQU8sU0FBUCxDQUFmO0FBRUFBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBQ0FELE9BQU9DLEtBQVAsQ0FBYyxpQkFBZ0JDLGlCQUFJQyxPQUFRLEVBQTFDO0FBRUEsSUFBSUMsUUFBSjtBQUNBLE1BQU1DLE9BQU9DLFFBQVFDLElBQXJCOztBQUVBLFNBQVNDLE9BQVQsQ0FBaUJILElBQWpCLEVBQXVCSSxPQUF2QixFQUFnQztBQUM5QlQsU0FBT0MsS0FBUCxDQUFhSSxJQUFiO0FBQ0EsUUFBTUssU0FBUyxrQkFBVUwsSUFBVixFQUFnQkksT0FBaEIsQ0FBZjtBQUNBVCxTQUFPQyxLQUFQLENBQWEsK0JBQWIsRUFBOENTLE9BQU9OLFFBQXJEO0FBQ0FBLGFBQVdNLE9BQU9OLFFBQWxCO0FBQ0FKLFNBQU9XLEdBQVAsQ0FBV0QsT0FBT0UsT0FBbEI7QUFDRDs7QUFFRCxTQUFTQyxXQUFULENBQXFCUixJQUFyQixFQUEyQkksT0FBM0IsRUFBb0M7QUFDbEMsTUFBSUssUUFBUVIsUUFBUVEsS0FBcEI7O0FBQ0EsTUFBSSxDQUFDQSxNQUFNQyxVQUFYLEVBQXVCO0FBQ3JCZixXQUFPQyxLQUFQLENBQWEsNkNBQWI7QUFDQTtBQUNEOztBQUNELHlCQUFTYSxLQUFUO0FBQ0FBLFFBQU1FLEVBQU4sQ0FBUyxVQUFULEVBQXFCLFNBQVNDLGdCQUFULENBQTBCQyxFQUExQixFQUE4QkMsR0FBOUIsRUFBbUM7QUFDdERuQixXQUFPQyxLQUFQLENBQWEsZ0JBQWIsRUFBK0JrQixNQUFNQSxJQUFJQyxJQUFWLEdBQWlCRixFQUFoRDs7QUFDQSxRQUFJQyxPQUFPQSxJQUFJQyxJQUFKLEtBQWEsUUFBeEIsRUFBa0M7QUFDaENwQixhQUFPQyxLQUFQLENBQWEsY0FBYjtBQUNBRCxhQUFPQyxLQUFQLENBQWFRLE9BQWI7QUFDQUQsY0FBUUgsSUFBUixFQUFjSSxPQUFkO0FBQ0Q7O0FBQ0QsUUFBSVUsT0FBT0EsSUFBSUUsSUFBWCxJQUFtQkYsSUFBSUMsSUFBSixLQUFhLEdBQXBDLEVBQXlDO0FBQ3ZDZCxjQUFRZ0IsSUFBUjtBQUNEO0FBQ0YsR0FWRDtBQVdBUixRQUFNQyxVQUFOLENBQWlCLElBQWpCO0FBQ0FELFFBQU1TLE1BQU47QUFDRDs7QUFFRHZCLE9BQU9DLEtBQVAsQ0FBYSxzQkFBYixFQUFxQ0ksSUFBckM7O0FBQ0EsTUFBTW1CLGdCQUFnQkMsaUJBQVlDLEtBQVosQ0FBa0JyQixJQUFsQixDQUF0Qjs7QUFDQXNCLGtCQUFTQyxVQUFULEdBQXNCSixhQUF0Qjs7QUFFQSxJQUFJQSxjQUFjSyxVQUFsQixFQUE4QjtBQUM1QjdCLFNBQU9XLEdBQVAsQ0FBV1QsaUJBQUlDLE9BQWY7QUFDRCxDQUZELE1BRU87QUFDTEgsU0FBT0MsS0FBUCxDQUFhLGNBQWI7O0FBQ0EsUUFBTTZCLFVBQVVDLG1CQUFVTCxLQUFWLENBQWdCckIsSUFBaEIsRUFBc0JtQixhQUF0QixDQUFoQjs7QUFDQSxNQUFJLENBQUNBLGNBQWNRLElBQW5CLEVBQXlCO0FBQ3ZCaEMsV0FBT0MsS0FBUCxDQUFhLHNCQUFiOztBQUNBLFFBQUl1QixjQUFjUyxLQUFsQixFQUF5QjtBQUN2QjtBQUNEOztBQUNEekIsWUFBUXNCLE9BQVIsRUFBaUJOLGFBQWpCOztBQUNBLFFBQUlBLGNBQWNVLEtBQWxCLEVBQXlCO0FBQ3ZCbEMsYUFBT0MsS0FBUCxDQUFhLFNBQWI7QUFDQVksa0JBQVlpQixPQUFaLEVBQXFCTixhQUFyQjtBQUNBLDRCQUFRQSxhQUFSO0FBQ0Q7QUFDRixHQVhELE1BV087QUFDTHhCLFdBQU9XLEdBQVAsQ0FBV2MsaUJBQVlVLFlBQVosRUFBWDtBQUNEO0FBQ0Y7O0FBR0Q3QixRQUFRVSxFQUFSLENBQVcsTUFBWCxFQUFtQixNQUFNO0FBQ3ZCaEIsU0FBT0MsS0FBUCxDQUFjLFlBQVdHLFFBQVMsRUFBbEM7QUFDQUUsVUFBUWdCLElBQVIsQ0FBYWxCLFFBQWI7QUFDRCxDQUhEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLXByb2Nlc3MtZXhpdDogMCovXG5pbXBvcnQga2V5cHJlc3MgZnJvbSAna2V5cHJlc3MnO1xuXG5pbXBvcnQgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgZXNsaW50Q2xpIGZyb20gJy4vZXNsaW50L2NsaSc7XG5pbXBvcnQgaGVscE9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcbmltcG9ydCB3YXRjaGVyIGZyb20gJy4vd2F0Y2hlcic7XG5pbXBvcnQgYXJnUGFyc2VyIGZyb20gJy4vYXJnLXBhcnNlcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBwa2cgZnJvbSAnLi4vcGFja2FnZSc7XG5pbXBvcnQgY2xlYXJUZXJtaW5hbCBmcm9tICcuL2Zvcm1hdHRlcnMvaGVscGVycy9jbGVhci10ZXJtaW5hbC5qcyc7XG5cbmNvbnN0IGxvZ2dlciA9IExvZ2dlcignZXN3LWNsaScpO1xuXG5sb2dnZXIuZGVidWcoJ0xvYWRlZCcpO1xubG9nZ2VyLmRlYnVnKGBFc2xpbnQtV2F0Y2g6ICR7cGtnLnZlcnNpb259YCk7XG5cbmxldCBleGl0Q29kZTtcbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Y7XG5cbmZ1bmN0aW9uIHJ1bkxpbnQoYXJncywgb3B0aW9ucykge1xuICBsb2dnZXIuZGVidWcoYXJncyk7XG4gIGNvbnN0IHJlc3VsdCA9IGVzbGludENsaShhcmdzLCBvcHRpb25zKTtcbiAgbG9nZ2VyLmRlYnVnKCdsaW50IGNvbXBsZXRlZC4gRXhpdCBDb2RlOiAlbycsIHJlc3VsdC5leGl0Q29kZSk7XG4gIGV4aXRDb2RlID0gcmVzdWx0LmV4aXRDb2RlO1xuICBsb2dnZXIubG9nKHJlc3VsdC5tZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24ga2V5TGlzdGVuZXIoYXJncywgb3B0aW9ucykge1xuICBsZXQgc3RkaW4gPSBwcm9jZXNzLnN0ZGluO1xuICBpZiAoIXN0ZGluLnNldFJhd01vZGUpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1Byb2Nlc3MgbWlnaHQgYmUgd3JhcHBlZCBleGl0aW5nIGtleWJpbmRpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cbiAga2V5cHJlc3Moc3RkaW4pO1xuICBzdGRpbi5vbigna2V5cHJlc3MnLCBmdW5jdGlvbiBrZXlQcmVzc0xpc3RlbmVyKGNoLCBrZXkpIHtcbiAgICBsb2dnZXIuZGVidWcoJyVzIHdhcyBwcmVzc2VkJywga2V5ID8ga2V5Lm5hbWUgOiBjaCk7XG4gICAgaWYgKGtleSAmJiBrZXkubmFtZSA9PT0gJ3JldHVybicpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygncmVsaW50aW5nLi4uJyk7XG4gICAgICBsb2dnZXIuZGVidWcob3B0aW9ucyk7XG4gICAgICBydW5MaW50KGFyZ3MsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoa2V5ICYmIGtleS5jdHJsICYmIGtleS5uYW1lID09PSAnYycpIHtcbiAgICAgIHByb2Nlc3MuZXhpdCgpO1xuICAgIH1cbiAgfSk7XG4gIHN0ZGluLnNldFJhd01vZGUodHJ1ZSk7XG4gIHN0ZGluLnJlc3VtZSgpO1xufVxuXG5sb2dnZXIuZGVidWcoJ0FyZ3VtZW50cyBwYXNzZWQ6ICVvJywgYXJncyk7XG5jb25zdCBwYXJzZWRPcHRpb25zID0gaGVscE9wdGlvbnMucGFyc2UoYXJncyk7XG5zZXR0aW5ncy5jbGlPcHRpb25zID0gcGFyc2VkT3B0aW9ucztcblxuaWYgKHBhcnNlZE9wdGlvbnMuZXN3VmVyc2lvbikge1xuICBsb2dnZXIubG9nKHBrZy52ZXJzaW9uKTtcbn0gZWxzZSB7XG4gIGxvZ2dlci5kZWJ1ZygnUGFyc2luZyBhcmdzJyk7XG4gIGNvbnN0IGVzbEFyZ3MgPSBhcmdQYXJzZXIucGFyc2UoYXJncywgcGFyc2VkT3B0aW9ucyk7XG4gIGlmICghcGFyc2VkT3B0aW9ucy5oZWxwKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdSdW5uaW5nIGluaXRpYWwgbGludCcpO1xuICAgIGlmIChwYXJzZWRPcHRpb25zLmNsZWFyKSB7XG4gICAgICBjbGVhclRlcm1pbmFsKCk7XG4gICAgfVxuICAgIHJ1bkxpbnQoZXNsQXJncywgcGFyc2VkT3B0aW9ucyk7XG4gICAgaWYgKHBhcnNlZE9wdGlvbnMud2F0Y2gpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnLXcgc2VlbicpO1xuICAgICAga2V5TGlzdGVuZXIoZXNsQXJncywgcGFyc2VkT3B0aW9ucyk7XG4gICAgICB3YXRjaGVyKHBhcnNlZE9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIubG9nKGhlbHBPcHRpb25zLmdlbmVyYXRlSGVscCgpKTtcbiAgfVxufVxuXG5cbnByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhgRXhpdGluZzogJHtleGl0Q29kZX1gKTtcbiAgcHJvY2Vzcy5leGl0KGV4aXRDb2RlKTtcbn0pO1xuIl19