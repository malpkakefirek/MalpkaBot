"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _optionator = _interopRequireDefault(require("optionator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _help = _interopRequireDefault(require("./eslint/help"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('options');
logger.debug('Loaded');
const settings = {
  prepend: 'esw [options] [file.js ...] [dir ...]',
  concatRepeatedArrays: true,
  mergeRepeatedObjects: true
};
const myOptions = [{
  heading: 'Options'
}, {
  option: 'help',
  alias: 'h',
  type: 'Boolean',
  description: 'Show help'
}, {
  option: 'format',
  alias: 'f',
  type: 'String',
  default: 'simple-detail',
  description: 'Use a specific output format'
}, {
  option: 'watch',
  alias: 'w',
  type: 'Boolean',
  description: 'Enable file watch'
}, {
  option: 'changed',
  type: 'Boolean',
  description: 'Enables single file linting while watch is enabled'
}, {
  option: 'clear',
  type: 'Boolean',
  description: 'Clear terminal when running lint'
}, {
  option: 'esw-version',
  type: 'Boolean',
  description: "Prints Eslint-Watch's Version"
}];
const eslintOptions = (0, _help.default)();

const newOptions = _lodash.default.union(myOptions, eslintOptions);

settings.options = newOptions;

var _default = (0, _optionator.default)(settings);

exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb25zLmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImRlYnVnIiwic2V0dGluZ3MiLCJwcmVwZW5kIiwiY29uY2F0UmVwZWF0ZWRBcnJheXMiLCJtZXJnZVJlcGVhdGVkT2JqZWN0cyIsIm15T3B0aW9ucyIsImhlYWRpbmciLCJvcHRpb24iLCJhbGlhcyIsInR5cGUiLCJkZXNjcmlwdGlvbiIsImRlZmF1bHQiLCJlc2xpbnRPcHRpb25zIiwibmV3T3B0aW9ucyIsIl8iLCJ1bmlvbiIsIm9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLFNBQVMscUJBQU8sU0FBUCxDQUFmO0FBQ0FBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBRUEsTUFBTUMsV0FBVztBQUNmQyxXQUFTLHVDQURNO0FBRWZDLHdCQUFzQixJQUZQO0FBR2ZDLHdCQUFzQjtBQUhQLENBQWpCO0FBTUEsTUFBTUMsWUFBWSxDQUNoQjtBQUNFQyxXQUFTO0FBRFgsQ0FEZ0IsRUFJaEI7QUFDRUMsVUFBUSxNQURWO0FBRUVDLFNBQU8sR0FGVDtBQUdFQyxRQUFNLFNBSFI7QUFJRUMsZUFBYTtBQUpmLENBSmdCLEVBVWhCO0FBQ0VILFVBQVEsUUFEVjtBQUVFQyxTQUFPLEdBRlQ7QUFHRUMsUUFBTSxRQUhSO0FBSUVFLFdBQVMsZUFKWDtBQUtFRCxlQUFhO0FBTGYsQ0FWZ0IsRUFpQmhCO0FBQ0VILFVBQVEsT0FEVjtBQUVFQyxTQUFPLEdBRlQ7QUFHRUMsUUFBTSxTQUhSO0FBSUVDLGVBQWE7QUFKZixDQWpCZ0IsRUF1QmhCO0FBQ0VILFVBQVEsU0FEVjtBQUVFRSxRQUFNLFNBRlI7QUFHRUMsZUFBYTtBQUhmLENBdkJnQixFQTRCaEI7QUFDRUgsVUFBUSxPQURWO0FBRUVFLFFBQU0sU0FGUjtBQUdFQyxlQUFhO0FBSGYsQ0E1QmdCLEVBaUNoQjtBQUNFSCxVQUFRLGFBRFY7QUFFRUUsUUFBTSxTQUZSO0FBR0VDLGVBQWE7QUFIZixDQWpDZ0IsQ0FBbEI7QUF3Q0EsTUFBTUUsZ0JBQWdCLG9CQUF0Qjs7QUFDQSxNQUFNQyxhQUFhQyxnQkFBRUMsS0FBRixDQUFRVixTQUFSLEVBQW1CTyxhQUFuQixDQUFuQjs7QUFDQVgsU0FBU2UsT0FBVCxHQUFtQkgsVUFBbkI7O2VBRWUseUJBQVdaLFFBQVgsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcHRpb25hdG9yIGZyb20gJ29wdGlvbmF0b3InO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IGdldE9wdGlvbnMgZnJvbSAnLi9lc2xpbnQvaGVscCc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyKCdvcHRpb25zJyk7XG5sb2dnZXIuZGVidWcoJ0xvYWRlZCcpO1xuXG5jb25zdCBzZXR0aW5ncyA9IHtcbiAgcHJlcGVuZDogJ2VzdyBbb3B0aW9uc10gW2ZpbGUuanMgLi4uXSBbZGlyIC4uLl0nLFxuICBjb25jYXRSZXBlYXRlZEFycmF5czogdHJ1ZSxcbiAgbWVyZ2VSZXBlYXRlZE9iamVjdHM6IHRydWUsXG59O1xuXG5jb25zdCBteU9wdGlvbnMgPSBbXG4gIHtcbiAgICBoZWFkaW5nOiAnT3B0aW9ucycsXG4gIH0sXG4gIHtcbiAgICBvcHRpb246ICdoZWxwJyxcbiAgICBhbGlhczogJ2gnLFxuICAgIHR5cGU6ICdCb29sZWFuJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Nob3cgaGVscCcsXG4gIH0sXG4gIHtcbiAgICBvcHRpb246ICdmb3JtYXQnLFxuICAgIGFsaWFzOiAnZicsXG4gICAgdHlwZTogJ1N0cmluZycsXG4gICAgZGVmYXVsdDogJ3NpbXBsZS1kZXRhaWwnLFxuICAgIGRlc2NyaXB0aW9uOiAnVXNlIGEgc3BlY2lmaWMgb3V0cHV0IGZvcm1hdCcsXG4gIH0sXG4gIHtcbiAgICBvcHRpb246ICd3YXRjaCcsXG4gICAgYWxpYXM6ICd3JyxcbiAgICB0eXBlOiAnQm9vbGVhbicsXG4gICAgZGVzY3JpcHRpb246ICdFbmFibGUgZmlsZSB3YXRjaCcsXG4gIH0sXG4gIHtcbiAgICBvcHRpb246ICdjaGFuZ2VkJyxcbiAgICB0eXBlOiAnQm9vbGVhbicsXG4gICAgZGVzY3JpcHRpb246ICdFbmFibGVzIHNpbmdsZSBmaWxlIGxpbnRpbmcgd2hpbGUgd2F0Y2ggaXMgZW5hYmxlZCcsXG4gIH0sXG4gIHtcbiAgICBvcHRpb246ICdjbGVhcicsXG4gICAgdHlwZTogJ0Jvb2xlYW4nLFxuICAgIGRlc2NyaXB0aW9uOiAnQ2xlYXIgdGVybWluYWwgd2hlbiBydW5uaW5nIGxpbnQnLFxuICB9LFxuICB7XG4gICAgb3B0aW9uOiAnZXN3LXZlcnNpb24nLFxuICAgIHR5cGU6ICdCb29sZWFuJyxcbiAgICBkZXNjcmlwdGlvbjogXCJQcmludHMgRXNsaW50LVdhdGNoJ3MgVmVyc2lvblwiLFxuICB9LFxuXTtcblxuY29uc3QgZXNsaW50T3B0aW9ucyA9IGdldE9wdGlvbnMoKTtcbmNvbnN0IG5ld09wdGlvbnMgPSBfLnVuaW9uKG15T3B0aW9ucywgZXNsaW50T3B0aW9ucyk7XG5zZXR0aW5ncy5vcHRpb25zID0gbmV3T3B0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9uYXRvcihzZXR0aW5ncyk7XG4iXX0=