"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = eslintHelp;

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _cli = _interopRequireDefault(require("./cli"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('eslint-help');
logger.debug('Loaded');
const namedOption = /^--/;

function parseNo(option, str) {
  if (!str) return;
  let cmd = str.replace('--', '');

  if (/no-/.test(cmd)) {
    logger.debug('Parsing no option', str);
    cmd = cmd.replace('no-', '');
    option.default = 'true';
  }

  option.option = cmd;
  return option;
}

function parseDouble(arr) {
  const description = _lodash.default.without(arr.slice(2), '').join(' ');

  return {
    option: arr[0].replace('--', ''),
    type: 'Boolean',
    alias: arr[1].replace('--', ''),
    description: description
  };
}

function parseRegular(arr) {
  logger.debug('Parsing %s', arr[0]);

  if (!arr[0]) {
    return;
  }

  const optionText = arr[0];
  const type = arr[1] || 'Boolean';
  const option = parseNo({}, optionText);

  const helpText = _lodash.default.without(arr, optionText, type, '');

  const description = helpText.join(' ');
  option.type = type;

  if (description) {
    option.description = description;
  }

  return option;
}

function parseAlias(arr) {
  const alias = arr[0];
  logger.debug('Alias found: %s', alias);
  const option = parseRegular(_lodash.default.without(arr, alias));

  if (alias) {
    option.alias = alias.replace('-', '');
  }

  return option;
}

function createOption(arr) {
  let option;

  if (namedOption.test(arr[0]) && namedOption.test(arr[1])) {
    // no alias defaulted boolean
    option = parseDouble(arr);
  } else if (namedOption.test(arr[0]) && !namedOption.test(arr[1])) {
    // just a no alias
    option = parseRegular(arr);
  } else {
    // aliased or other
    option = parseAlias(arr);
  }

  return _lodash.default.isEmpty(option) ? undefined : option;
}

function parseHelp(helpText) {
  let helpArr = helpText.split('\n');
  let previousLine = [];
  return _lodash.default.without(_lodash.default.map(helpArr, (row, index) => {
    if (index <= 2) {
      return;
    }

    let str = row.replace(',', '');
    let arr = str.trim().split(' ');

    if (str.indexOf('-') >= 0 && previousLine[0] !== '') {
      let option = createOption(arr);

      if (option && option.option !== 'format' && option.option !== 'help') {
        return option;
      }
    }

    previousLine = arr;
  }), undefined);
}

function eslintHelp() {
  logger.debug('Executing help');
  const result = (0, _cli.default)(['--help'], {
    stdio: [process.stdin, null, process.stderr]
  });

  if (!result.message) {
    throw new Error('Help text not received from Eslint.');
  }

  const eslintOptions = parseHelp(result.message);
  return eslintOptions;
}

module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,