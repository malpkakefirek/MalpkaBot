"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _textTable = _interopRequireDefault(require("text-table"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _characters = _interopRequireDefault(require("./helpers/characters"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Template Author Sindre Sorhus @eslint
// https://github.com/sindresorhus/eslint-stylish
const logger = (0, _logger.default)('simple-detail');
logger.debug('loaded');
let tableSettings = {
  align: ['', '', 'r'],
  stringLength: str => (0, _stripAnsi.default)(str).length
};

function pluralize(word, count) {
  return count === 1 ? word : word + 's';
}

function simpleDetail(results) {
  let totalErrors = 0;
  let totalWarnings = 0;
  let output = '';
  let cleanMsg = '';

  let messageTime = _chalk.default.dim(`(${new Date().toLocaleTimeString()})`);

  logger.debug(results);
  results.forEach(function (result) {
    let messages = result.messages;
    let warnings = 0;
    let errors = 0;

    if (!messages.length) {
      return;
    }

    const tableContents = messages.map(function (message) {
      function getMessageType(msg) {
        if (msg.fatal || msg.severity === 2) {
          totalErrors++;
          errors++;
          return _chalk.default.red(_characters.default.x);
        }

        totalWarnings++;
        warnings++;
        return _chalk.default.yellow(_characters.default.ex);
      }

      return ['', getMessageType(message), message.line || 0, message.column || 0, _chalk.default.dim(message.message.replace(/\.$/, '')), _chalk.default.dim(message.ruleId || '')];
    });
    const tableText = (0, _textTable.default)(tableContents, tableSettings);
    output += _chalk.default.white.underline(result.filePath) + ` (${_chalk.default.red(errors)}/${_chalk.default.yellow(warnings)})${_characters.default.endLine}`;
    output += tableText.split(_characters.default.endLine).map(function (el) {
      return el.replace(/(\d+)\s+(\d+)/, (m, p1, p2) => _chalk.default.dim(`${p1}:${p2}`));
    }).join(_characters.default.endLine) + _characters.default.endLine + _characters.default.endLine;
  });

  if (totalErrors) {
    output += _chalk.default.red(`${_characters.default.x} ${totalErrors} ${pluralize('error', totalErrors)} `);
  }

  if (totalWarnings) {
    output += _chalk.default.yellow(`${_characters.default.ex} ${totalWarnings} ${pluralize('warning', totalWarnings)} `);
  }

  if (results.length > 0 || !results.length) {
    cleanMsg = _chalk.default.green(`${_characters.default.check} Clean`) + ` ${messageTime}`;
  }

  output = totalErrors || totalWarnings ? `${output}${messageTime}${_characters.default.endLine}` : cleanMsg;
  return output;
}

var _default = simpleDetail;
exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mb3JtYXR0ZXJzL3NpbXBsZS1kZXRhaWwuanMiXSwibmFtZXMiOlsibG9nZ2VyIiwiZGVidWciLCJ0YWJsZVNldHRpbmdzIiwiYWxpZ24iLCJzdHJpbmdMZW5ndGgiLCJzdHIiLCJsZW5ndGgiLCJwbHVyYWxpemUiLCJ3b3JkIiwiY291bnQiLCJzaW1wbGVEZXRhaWwiLCJyZXN1bHRzIiwidG90YWxFcnJvcnMiLCJ0b3RhbFdhcm5pbmdzIiwib3V0cHV0IiwiY2xlYW5Nc2ciLCJtZXNzYWdlVGltZSIsImNoYWxrIiwiZGltIiwiRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsImZvckVhY2giLCJyZXN1bHQiLCJtZXNzYWdlcyIsIndhcm5pbmdzIiwiZXJyb3JzIiwidGFibGVDb250ZW50cyIsIm1hcCIsIm1lc3NhZ2UiLCJnZXRNZXNzYWdlVHlwZSIsIm1zZyIsImZhdGFsIiwic2V2ZXJpdHkiLCJyZWQiLCJjIiwieCIsInllbGxvdyIsImV4IiwibGluZSIsImNvbHVtbiIsInJlcGxhY2UiLCJydWxlSWQiLCJ0YWJsZVRleHQiLCJ3aGl0ZSIsInVuZGVybGluZSIsImZpbGVQYXRoIiwiZW5kTGluZSIsInNwbGl0IiwiZWwiLCJtIiwicDEiLCJwMiIsImpvaW4iLCJncmVlbiIsImNoZWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFQQTtBQUNBO0FBUUEsTUFBTUEsU0FBUyxxQkFBTyxlQUFQLENBQWY7QUFFQUEsT0FBT0MsS0FBUCxDQUFhLFFBQWI7QUFFQSxJQUFJQyxnQkFBZ0I7QUFDbEJDLFNBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEdBQVQsQ0FEVztBQUVsQkMsZ0JBQWVDLEdBQUQsSUFBUyx3QkFBTUEsR0FBTixFQUFXQztBQUZoQixDQUFwQjs7QUFLQSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBZ0M7QUFDOUIsU0FBT0EsVUFBVSxD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RUFBMkM7QUFDekNTLGVBQVdFLGVBQU1vQyxLQUFOLENBQWEsR0FBRW5CLG9CQUFFb0IsS0FBTSxRQUF2QixJQUFtQyxJQUFHdEMsV0FBWSxFQUE3RDtBQUNEOztBQUVERixXQUFTRixlQUFlQyxhQUFmLEdBQWdDLEdBQUVDLE1BQU8sR0FBRUUsV0FBWSxHQUFFa0Isb0JBQUVZLE9BQVEsRUFBbkUsR0FBdUUvQixRQUFoRjtBQUVBLFNBQU9ELE1BQVA7QUFDRDs7ZUFFY0osWSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRlbXBsYXRlIEF1dGhvciBTaW5kcmUgU29yaHVzIEBlc2xpbnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNsaW50LXN0eWxpc2hcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgdGFibGUgZnJvbSAndGV4dC10YWJsZSc7XG5pbXBvcnQgc3RyaXAgZnJvbSAnc3RyaXAtYW5zaSc7XG5cbmltcG9ydCBjIGZyb20gJy4vaGVscGVycy9jaGFyYWN0ZXJzJztcbmltcG9ydCBMb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyKCdzaW1wbGUtZGV0YWlsJyk7XG5cbmxvZ2dlci5kZWJ1ZygnbG9hZGVkJyk7XG5cbmxldCB0YWJsZVNldHRpbmdzID0ge1xuICBhbGlnbjogWycnLCAnJywgJ3InXSxcbiAgc3RyaW5nTGVuZ3RoOiAoc3RyKSA9PiBzdHJpcChzdHIpLmxlbmd0aCxcbn07XG5cbmZ1bmN0aW9uIHBsdXJhbGl6ZSh3b3JkLCBjb3VudCkge1xuICByZXR1cm4gY291bnQgPT09IDEgPyB3b3JkIDogd29yZCArICdzJztcbn1cblxuZnVuY3Rpb24gc2ltcGxlRGV0YWlsKHJlc3VsdHMpIHtcbiAgbGV0IHRvdGFsRXJyb3JzID0gMDtcbiAgbGV0IHRvdGFsV2FybmluZ3MgPSAwO1xuICBsZXQgb3V0cHV0ID0gJyc7XG4gIGxldCBjbGVhbk1zZyA9ICcnO1xuICBsZXQgbWVzc2FnZVRpbWUgPSBjaGFsay5kaW0oYCgke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9KWApO1xuICBsb2dnZXIuZGVidWcocmVzdWx0cyk7XG4gIHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICBsZXQgbWVzc2FnZXMgPSByZXN1bHQubWVzc2FnZXM7XG4gICAgbGV0IHdhcm5pbmdzID0gMDtcbiAgICBsZXQgZXJyb3JzID0gMDtcbiAgICBpZiAoIW1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YWJsZUNvbnRlbnRzID0gbWVzc2FnZXMubWFwKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE1lc3NhZ2VUeXBlKG1zZykge1xuICAgICAgICBpZiAobXNnLmZhdGFsIHx8IG1zZy5zZXZlcml0eSA9PT0gMikge1xuICAgICAgICAgIHRvdGFsRXJyb3JzKys7XG4gICAgICAgICAgZXJyb3JzKys7XG4gICAgICAgICAgcmV0dXJuIGNoYWxrLnJlZChjLngpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG90YWxXYXJuaW5ncysrO1xuICAgICAgICB3YXJuaW5ncysrO1xuICAgICAgICByZXR1cm4gY2hhbGsueWVsbG93KGMuZXgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICAnJyxcbiAgICAgICAgZ2V0TWVzc2FnZVR5cGUobWVzc2FnZSksXG4gICAgICAgIG1lc3NhZ2UubGluZSB8fCAwLFxuICAgICAgICBtZXNzYWdlLmNvbHVtbiB8fCAwLFxuICAgICAgICBjaGFsay5kaW0obWVzc2FnZS5tZXNzYWdlLnJlcGxhY2UoL1xcLiQvLCAnJykpLFxuICAgICAgICBjaGFsay5kaW0obWVzc2FnZS5ydWxlSWQgfHwgJycpLFxuICAgICAgXTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRhYmxlVGV4dCA9IHRhYmxlKHRhYmxlQ29udGVudHMsIHRhYmxlU2V0dGluZ3MpO1xuXG4gICAgb3V0cHV0ICs9IGNoYWxrLndoaXRlLnVuZGVybGluZShyZXN1bHQuZmlsZVBhdGgpICsgYCAoJHtjaGFsay5yZWQoZXJyb3JzKX0vJHtjaGFsay55ZWxsb3cod2FybmluZ3MpfSkke2MuZW5kTGluZX1gO1xuICAgIG91dHB1dCArPVxuICAgICAgdGFibGVUZXh0XG4gICAgICAgIC5zcGxpdChjLmVuZExpbmUpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICByZXR1cm4gZWwucmVwbGFjZSgvKFxcZCspXFxzKyhcXGQrKS8sIChtLCBwMSwgcDIpID0+IGNoYWxrLmRpbShgJHtwMX06JHtwMn1gKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKGMuZW5kTGluZSkgK1xuICAgICAgYy5lbmRMaW5lICtcbiAgICAgIGMuZW5kTGluZTtcbiAgfSk7XG5cbiAgaWYgKHRvdGFsRXJyb3JzKSB7XG4gICAgb3V0cHV0ICs9IGNoYWxrLnJlZChgJHtjLnh9ICR7dG90YWxFcnJvcnN9ICR7cGx1cmFsaXplKCdlcnJvcicsIHRvdGFsRXJyb3JzKX0gYCk7XG4gIH1cbiAgaWYgKHRvdGFsV2FybmluZ3MpIHtcbiAgICBvdXRwdXQgKz0gY2hhbGsueWVsbG93KGAke2MuZXh9ICR7dG90YWxXYXJuaW5nc30gJHtwbHVyYWxpemUoJ3dhcm5pbmcnLCB0b3RhbFdhcm5pbmdzKX0gYCk7XG4gIH1cblxuICBpZiAocmVzdWx0cy5sZW5ndGggPiAwIHx8ICFyZXN1bHRzLmxlbmd0aCkge1xuICAgIGNsZWFuTXNnID0gY2hhbGsuZ3JlZW4oYCR7Yy5jaGVja30gQ2xlYW5gKSArIGAgJHttZXNzYWdlVGltZX1gO1xuICB9XG5cbiAgb3V0cHV0ID0gdG90YWxFcnJvcnMgfHwgdG90YWxXYXJuaW5ncyA/IGAke291dHB1dH0ke21lc3NhZ2VUaW1lfSR7Yy5lbmRMaW5lfWAgOiBjbGVhbk1zZztcblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaW1wbGVEZXRhaWw7XG4iXX0=