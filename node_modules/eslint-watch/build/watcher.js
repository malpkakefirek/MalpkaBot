"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = watcher;

var _chokidar = _interopRequireDefault(require("chokidar"));

var _eslint = _interopRequireDefault(require("eslint"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _settings = _interopRequireDefault(require("./settings"));

var _logger = _interopRequireDefault(require("./logger"));

var _clearTerminal = _interopRequireDefault(require("./formatters/helpers/clear-terminal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('watcher');
logger.debug('Loaded');
const events = {
  change: 'change'
};
const chokidarOptions = {
  ignored: /\.git|node_modules|bower_components/
};
const cliOptionProperties = ['config', 'eslintrc', 'ext', 'parser', 'cache', 'cacheLocation', 'ignore', 'ignorePath', 'ignorePattern', 'fix', 'parserOptions', 'global', 'rule'];
const cliOptionMap = {
  config: 'configFile',
  eslintrc: 'useEslintrc',
  ext: 'extensions',
  cacheFile: 'cacheLocation',
  rule: 'rules'
};

function filterWarnings(results) {
  return _lodash.default.reduce(results, (curr, result) => {
    if (result.warningCount) {
      let newResult = _lodash.default.omit(result, 'messages');

      newResult.messages = _lodash.default.filter(result.messages, m => m.severity > 1);
      curr.push(newResult);
      return curr;
    }

    curr.push(result);
    return curr;
  }, []);
}

function requireFormatter(formatterPath) {
  try {
    return require(formatterPath);
  } catch (ex) {
    ex.message = `There was a problem loading formatter: ${formatterPath}\nError: ${ex.message}`;
    throw ex;
  }
}

function getFormatter(cli, formatter) {
  const pathToFormatterSpecified = formatter.includes('\\');
  const isSimpleFormatter = formatter.includes('simple');
  const formatterPath = formatter.replace(/\\/g, '/');

  if (isSimpleFormatter) {
    logger.debug(`Formatter local: ${formatter}`);
    return requireFormatter(`./formatters/${formatterPath}`);
  } else if (pathToFormatterSpecified) {
    const cwd = process.cwd();
    logger.debug('Formatter user:', formatterPath);

    const location = _path.default.resolve(cwd, formatterPath);

    return requireFormatter(location);
  }

  logger.debug(`Formatter eslint: ${formatter}`);
  return cli.getFormatter(formatter);
} ///https://github.com/eslint/eslint/blob/233440e524aa41545b66b2c3c7ca26fe790e32e0/tests/lib/cli-engine.js#L105-L107


function watcher(options) {
  const cliOptions = (0, _lodash.default)(options).pick(cliOptionProperties).reduce(function (result, value, key) {
    key = cliOptionMap[key] || key;
    result[key] = value;
    return result;
  }, {});
  logger.debug('cli', cliOptions);
  logger.debug('options', options);
  const cli = new _eslint.default.CLIEngine(cliOptions);
  const watchDir = options._.length ? options._ : [_path.default.resolve('./')];
  const formatter = getFormatter(cli, options.format);

  function lintFile(path) {
    logger.debug('lintFile: %s', path);

    if (options.clear) {
      (0, _clearTerminal.default)();
    }

    const report = cli.executeOnFiles(path);

    if (options.fix) {
      _eslint.default.CLIEngine.outputFixes(report);
    }

    const results = _settings.default.cliOptions.quiet ? filterWarnings(report.results) : report.results;
    logger.log(formatter(results));
  }

  function isWatchableExtension(filePath, extensions = cli.options.extensions) {
    const extension = _path.default.extname(filePath);

    const dotExtensions = extensions.map(e => {
      if (!e.match(/^\./)) {
        return `.${e}`;
      }

      return e;
    });
    logger.debug(extension, dotExtensions);

    if (dotExtensions.length > 0) {
      return _lodash.default.includes(dotExtensions, extension);
    } // Use the ESLint default extension, if none is provided


    return _lodash.default.includes(cli.options.extensions, extension);
  }

  _chokidar.default.watch(watchDir, chokidarOptions).on(events.change, function changeEvent(path) {
    logger.debug('Changed:', path);

    if (!cli.isPathIgnored(path) && isWatchableExtension(path, options.ext)) {
      const watchPath = options.changed ? [path] : watchDir;
      lintFile(watchPath);
    }
  }).on('error', logger.error);

  logger.debug('Watching: %o', watchDir);
}

module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,