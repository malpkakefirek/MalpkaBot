"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = (0, _logger.default)('arg-parser');
logger.debug('Loaded');
const simpleDetail = 'simple-detail';
const formatterPath = 'formatters';
const defaultPath = './';
const formatKey = '-f';
const keys = ['-w', '--watch', '--changed', '--clear', '--esw-version'];
const formats = ['simple', 'simple-success', simpleDetail];

function getPath(options) {
  logger.debug('GetPath: %s', options.format);

  const formatPath = _path.default.join(__dirname, formatterPath, options.format);

  logger.debug(formatPath);
  return formatPath;
}

var _default = {
  parse(cliArgs, options) {
    const dirs = options._;
    let formatSpecified = false;

    const args = _lodash.default.slice(cliArgs, 2, cliArgs.length);

    logger.debug('Directories to check: %o', dirs);
    logger.debug('Args %o', args);

    const arr = _lodash.default.without(_lodash.default.map(args, item => {
      if (!_lodash.default.includes(keys, item) && !_lodash.default.includes(formats, item)) {
        logger.debug('Pushing item: %s', item);
        return item;
      }

      if (_lodash.default.includes(formats, item)) {
        formatSpecified = true;
        logger.debug('Format specified');
        return getPath(options);
      }
    }), undefined);

    if (options.format === simpleDetail && !formatSpecified) {
      logger.debug('setting custom formatter');
      arr.push(formatKey);
      arr.push(getPath(options));
    }

    if (!dirs.length) {
      arr.push(defaultPath);
      logger.debug('Setting default path: %s', defaultPath);
    }

    return arr;
  }

};
exports.default = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcmctcGFyc2VyLmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImRlYnVnIiwic2ltcGxlRGV0YWlsIiwiZm9ybWF0dGVyUGF0aCIsImRlZmF1bHRQYXRoIiwiZm9ybWF0S2V5Iiwia2V5cyIsImZvcm1hdHMiLCJnZXRQYXRoIiwib3B0aW9ucyIsImZvcm1hdCIsImZvcm1hdFBhdGgiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInBhcnNlIiwiY2xpQXJncyIsImRpcnMiLCJfIiwiZm9ybWF0U3BlY2lmaWVkIiwiYXJncyIsInNsaWNlIiwibGVuZ3RoIiwiYXJyIiwid2l0aG91dCIsIm1hcCIsIml0ZW0iLCJpbmNsdWRlcyIsInVuZGVmaW5lZCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7OztBQUVBLE1BQU1BLFNBQVMscUJBQU8sWUFBUCxDQUFmO0FBQ0FBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiO0FBRUEsTUFBTUMsZUFBZSxlQUFyQjtBQUNBLE1BQU1DLGdCQUFnQixZQUF0QjtBQUVBLE1BQU1DLGNBQWMsSUFBcEI7QUFDQSxNQUFNQyxZQUFZLElBQWxCO0FBQ0EsTUFBTUMsT0FBTyxDQUFDLElBQUQsRUFBTyxTQUFQLEVBQWtCLFdBQWxCLEVBQStCLFNBQS9CLEVBQTBDLGVBQTFDLENBQWI7QUFDQSxNQUFNQyxVQUFVLENBQUMsUUFBRCxFQUFXLGdCQUFYLEVBQTZCTCxZQUE3QixDQUFoQjs7QUFFQSxTQUFTTSxPQUFULENBQWlCQyxPQUFqQixFQUEwQjtBQUN4QlQsU0FBT0MsS0FBUCxDQUFhLGFBQWIsRUFBNEJRLFFBQVFDLE1BQXBDOztBQUNBLFFBQU1DLGFBQWFDLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQlgsYUFBckIsRUFBb0NNLFFBQVFDLE1BQTVDLENBQW5COztBQUNBVixTQUFPQyxLQUFQLENBQWFVLFVBQWI7QUFDQSxTQUFPQSxVQUFQO0FBQ0Q7O2VBRWM7QUFDYkksUUFBTUMsT0FBTixFQUFlUCxPQUFmLEVBQXdCO0FBQ3RCLFVBQU1RLE9BQU9SLFFBQVFTLENBQXJCO0FBQ0EsUUFBSUMsa0JBQWtCLEtBQXRCOztBQUNBLFVBQU1DLE9BQU9GLGdCQUFFRyxLQUFGLENBQVFMLE9BQVIsRUFBaUIsQ0FBakIsRUFBb0JBLFFBQVFNLE1BQTVCLENBQWI7O0FBQ0F0QixXQUFPQyxLQUFQLENBQWEsMEJBQWIsRUFBeUNnQixJQUF6QztBQUNBakIsV0FBT0MsS0FBUCxDQUFhLFNBQWIsRUFBd0JtQixJQUF4Qjs7QUFDQSxVQUFNRyxNQUFNTCxnQkFBRU0sT0FBRixDQUNWTixnQkFBRU8sR0FBRixDQUFNTCxJQUFOLEVBQWFNLElBQUQsSUFBVTtBQUNwQixVQUFJLENBQUNSLGdCQUFFUyxRQUFGLENBQVdyQixJQUFYLEVBQWlCb0IsSUFBakIsQ0FBRCxJQUEyQixDQUFDUixnQkFBRVMsUUFBRixDQUFXcEIsT0FBWCxFQUFvQm1CLElBQXBCLENBQWhDLEVBQTJEO0FBQ3pEMUIsZUFBT0MsS0FBUCxDQUFhLGtCQUFiLEVBQWlDeUIsSUFBakM7QUFDQSxlQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsVUFBSVIsZ0JBQUVTLFFBQUYsQ0FBV3BCLE9BQVgsRUFBb0JtQixJQUFwQixDQUFKLEVBQStCO0FBQzdCUCwwQkFBa0IsSUFBbEI7QUFDQW5CLGVBQU9DLEtBQVAsQ0FBYSxrQkFBYjtBQUNBLGVBQU9PLFFBQVFDLE9BQVIsQ0FBUDtBQUNEO0FBQ0YsS0FWRCxDQURVLEVBWVZtQixTQVpVLENBQVo7O0FBZUEsUUFBSW5CLFFBQVFDLE1BQVIsS0FBbUJSLFlBQW5CLElBQW1DLENBQUNpQixlQUF4QyxFQUF5RDtBQUN2RG5CLGFBQU9DLEtBQVAsQ0FBYSwwQkFBYjtBQUNBc0IsVUFBSU0sSUFBSixDQUFTeEIsU0FBVDtBQUNBa0IsVUFBSU0sSUFBSixDQUFTckIsUUFBUUMsT0FBUixDQUFUO0FBQ0Q7O0FBQ0QsUUFBSSxDQUFDUSxLQUFLSyxNQUFWLEVBQWtCO0FBQ2hCQyxVQUFJTSxJQUFKLENBQVN6QixXQUFUO0FBQ0FKLGFBQU9DLEtBQVAsQ0FBYSwwQkFBYixFQUF5Q0csV0FBekM7QUFDRDs7QUFDRCxXQUFPbUIsR0FBUDtBQUNEOztBQWhDWSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyKCdhcmctcGFyc2VyJyk7XG5sb2dnZXIuZGVidWcoJ0xvYWRlZCcpO1xuXG5jb25zdCBzaW1wbGVEZXRhaWwgPSAnc2ltcGxlLWRldGFpbCc7XG5jb25zdCBmb3JtYXR0ZXJQYXRoID0gJ2Zvcm1hdHRlcnMnO1xuXG5jb25zdCBkZWZhdWx0UGF0aCA9ICcuLyc7XG5jb25zdCBmb3JtYXRLZXkgPSAnLWYnO1xuY29uc3Qga2V5cyA9IFsnLXcnLCAnLS13YXRjaCcsICctLWNoYW5nZWQnLCAnLS1jbGVhcicsICctLWVzdy12ZXJzaW9uJ107XG5jb25zdCBmb3JtYXRzID0gWydzaW1wbGUnLCAnc2ltcGxlLXN1Y2Nlc3MnLCBzaW1wbGVEZXRhaWxdO1xuXG5mdW5jdGlvbiBnZXRQYXRoKG9wdGlvbnMpIHtcbiAgbG9nZ2VyLmRlYnVnKCdHZXRQYXRoOiAlcycsIG9wdGlvbnMuZm9ybWF0KTtcbiAgY29uc3QgZm9ybWF0UGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIGZvcm1hdHRlclBhdGgsIG9wdGlvbnMuZm9ybWF0KTtcbiAgbG9nZ2VyLmRlYnVnKGZvcm1hdFBhdGgpO1xuICByZXR1cm4gZm9ybWF0UGF0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwYXJzZShjbGlBcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGlycyA9IG9wdGlvbnMuXztcbiAgICBsZXQgZm9ybWF0U3BlY2lmaWVkID0gZmFsc2U7XG4gICAgY29uc3QgYXJncyA9IF8uc2xpY2UoY2xpQXJncywgMiwgY2xpQXJncy5sZW5ndGgpO1xuICAgIGxvZ2dlci5kZWJ1ZygnRGlyZWN0b3JpZXMgdG8gY2hlY2s6ICVvJywgZGlycyk7XG4gICAgbG9nZ2VyLmRlYnVnKCdBcmdzICVvJywgYXJncyk7XG4gICAgY29uc3QgYXJyID0gXy53aXRob3V0KFxuICAgICAgXy5tYXAoYXJncywgKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKCFfLmluY2x1ZGVzKGtleXMsIGl0ZW0pICYmICFfLmluY2x1ZGVzKGZvcm1hdHMsIGl0ZW0pKSB7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKCdQdXNoaW5nIGl0ZW06ICVzJywgaXRlbSk7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8uaW5jbHVkZXMoZm9ybWF0cywgaXRlbSkpIHtcbiAgICAgICAgICBmb3JtYXRTcGVjaWZpZWQgPSB0cnVlO1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRm9ybWF0IHNwZWNpZmllZCcpO1xuICAgICAgICAgIHJldHVybiBnZXRQYXRoKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHVuZGVmaW5lZFxuICAgICk7XG5cbiAgICBpZiAob3B0aW9ucy5mb3JtYXQgPT09IHNpbXBsZURldGFpbCAmJiAhZm9ybWF0U3BlY2lmaWVkKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ3NldHRpbmcgY3VzdG9tIGZvcm1hdHRlcicpO1xuICAgICAgYXJyLnB1c2goZm9ybWF0S2V5KTtcbiAgICAgIGFyci5wdXNoKGdldFBhdGgob3B0aW9ucykpO1xuICAgIH1cbiAgICBpZiAoIWRpcnMubGVuZ3RoKSB7XG4gICAgICBhcnIucHVzaChkZWZhdWx0UGF0aCk7XG4gICAgICBsb2dnZXIuZGVidWcoJ1NldHRpbmcgZGVmYXVsdCBwYXRoOiAlcycsIGRlZmF1bHRQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfSxcbn07XG4iXX0=